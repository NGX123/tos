--- Informations ---
	-- Long(64bit) Mode --
		1. Main article - https://wiki.osdev.org/X86-64
		2. Kernel creation tutorial - https://wiki.osdev.org/Creating_a_64-bit_kernel
		3. 64bit boot with bootloader - https://wiki.osdev.org/BOOTBOOT

	-- UEFI --
		1. UEFI main article - https://wiki.osdev.org/UEFI
		2. UEFI app(something that can boot on UEFI) - https://wiki.osdev.org/UEFI_Bare_Bones
			* Making UEFI kernel loading - https://www.youtube.com/watch?v=FnRKA8JaxYE



--- Installing & Running ---
	-- OVMF - a replacement BIOS for QEMU -- 
		+ https://github.com/tianocore/tianocore.github.io/wiki/OVMF

		- Build OVMF from source -
			+ https://github.com/tianocore/tianocore.github.io/wiki/Getting-Started-with-EDK-II
			+ https://github.com/tianocore/tianocore.github.io/wiki/Using-EDK-II-with-Native-GCC
			+ https://github.com/tianocore/tianocore.github.io/wiki/Common-instructions
			+ https://github.com/tianocore/tianocore.github.io/wiki/How-to-build-OVMF
	
			1. 
				* sudo dnf groupinstall development-tools && sudo dnf install gcc-c++ iasl libuuid-devel nasm #edk2-tools-python
				* sudo apt-get install build-essential uuid-dev iasl git gcc-5 nasm python3-distutils
			2. git clone https://github.com/tianocore/edk2
			3. cd edk2
			4. git submodule update --init
			5. make -C BaseTools
			6. . edksetup.sh
			7. Add this to Conf/target.txt
				* ACTIVE_PLATFORM=OvmfPkg/OvmfPkgX64.dsc
				* TARGET_ARCH           = X64
				* TOOL_CHAIN_TAG        = GCC5
			7. build
			8. Go to Build/OvmfX64/DEBUG_GCC5/FV, the fd files are here

		- Use Precompiled OVMF binaries -
			1. sudo dnf install rpm2cpio
			2. Go to the https://www.kraxel.org/repos (The binaries FTP)
			3. Go to jenkins/edk2
			4. Download newest *-ovmf-x64-*
			5. Extract the contents - rpm2cpio file.rpm | cpio -idmv
			6. Go to the folder where .fd and .iso files are stored inside and they are what is needed

		- Run the OVMF -
			+ https://github.com/tianocore/tianocore.github.io/wiki/How-to-build-OVMF
			+ https://github.com/tianocore/tianocore.github.io/wiki/How-to-run-OVMF
			1. Go to directory with the compiled binaries
			2. Run firmware directrly:
				* qemu-system-x86_64 -L compiled_bins_dir --bios OVMF.fd -net none
			3. Run firmware with pflsh:
				* qemu-system-x86_64 \
				-drive if=pflash,format=raw,unit=0,file=OVMF_CODE.fd,readonly=on \
				-drive if=pflash,format=raw,unit=1,file=path_to_OVMF_VARS.fd \
				-net none


	-- x86_64 GCC --
		+ https://roscopeco.com/2018/11/25/using-gcc-as-cross-compiler-with-x86_64-target/
		+ https://wiki.osdev.org/GCC_Cross-Compiler

		- Build the x86_64 from source -
		1. 
